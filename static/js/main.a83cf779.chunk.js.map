{"version":3,"sources":["CustomButton.js","Cart.js","ProductCard.js","Catalog.js","Product.js","Routes.js","actions.js","actionTypes.js","CartIcon.js","NavBar.js","App.js","reducers/cartReducer.js","reducers/productsReducer.js","reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["CustomButton","color","onClickAction","btnName","Button","className","onClick","Cart","handleAddCart","handleRemoveCart","cart","useSelector","state","shallowEqual","Table","striped","items","map","item","to","id","name","price","quantity","total_amount","toFixed","ProductCard","product","image_url","Card","CardBody","CardTitle","CardText","Catalog","products","key","Product","cantFind","useParams","productItem","find","p","src","alt","description","Routes","dispatch","useDispatch","type","add_to_cart","remove_from_cart","exact","path","CartIcon","num_items","Navbar","App","INITIAL_STATE","rootReducer","action","cartItemIdx","findIndex","cartItem","slice","filter","Object","values","i","keys","productsReducer","combineReducers","cartReducer","Boolean","window","location","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a83cf779.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport './CustomButton.css';\r\n\r\nconst CustomButton = ({ color, onClickAction, btnName }) => {\r\n  return (\r\n    <Button\r\n      className={`${btnName} custom-btn`}\r\n      onClick={onClickAction}\r\n      color={color}\r\n    >\r\n      {btnName}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from 'react';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Table } from 'reactstrap';\r\nimport CustomButton from './CustomButton';\r\n\r\nconst Cart = ({ handleAddCart, handleRemoveCart }) => {\r\n  const { cart } = useSelector((state) => state.cart, shallowEqual);\r\n  return (\r\n    <div className='cart'>\r\n      <Table striped>\r\n        <thead>\r\n          <tr>\r\n            <th> Name</th>\r\n            <th> Price</th>\r\n            <th> Quantity</th>\r\n            <th> Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {cart.items.map((item) => (\r\n            <tr>\r\n              <Link to={`/products/${item.id}`}>\r\n                <th>{item.name}</th>\r\n              </Link>\r\n              <th>{item.price}</th>\r\n              <th>{item.quantity}</th>\r\n              <th>\r\n                <CustomButton\r\n                  onClickAction={() =>\r\n                    handleAddCart({\r\n                      ...item,\r\n                    })\r\n                  }\r\n                  color='primary'\r\n                  btnName='ðŸ›’ Add'\r\n                />\r\n\r\n                <CustomButton\r\n                  onClickAction={() => handleRemoveCart({ ...item })}\r\n                  color='danger'\r\n                  btnName='Remove ðŸ›’'\r\n                />\r\n              </th>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      <div>Cart Total: ${cart.total_amount.toFixed(2)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { add_to_cart, remove_from_cart } from './actions';\r\nimport CustomButton from './CustomButton';\r\nimport './ProductCard.css';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardImg,\r\n  CardText,\r\n  Button,\r\n  CardTitle,\r\n} from 'reactstrap';\r\n\r\nconst ProductCard = ({ product, handleAddCart, handleRemoveCart }) => {\r\n  const { id, name, image_url, price } = product;\r\n\r\n  return (\r\n    <div className='col-md-2 product-card'>\r\n      <Card>\r\n        <CardBody>\r\n          <Link to={`/products/${id}`}>\r\n            <CardTitle>\r\n              <h4>{name}</h4>\r\n            </CardTitle>\r\n          </Link>\r\n\r\n          <div>\r\n            <CardText>Price: ${price}</CardText>\r\n          </div>\r\n          <CustomButton\r\n            onClickAction={() =>\r\n              handleAddCart({\r\n                ...product,\r\n              })\r\n            }\r\n            color='primary'\r\n            btnName='ðŸ›’ Add'\r\n          />\r\n\r\n          <CustomButton\r\n            onClickAction={() => handleRemoveCart({ ...product })}\r\n            color='danger'\r\n            btnName='Remove ðŸ›’'\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n","import React from 'react';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport './Catalog.css';\r\n\r\nimport ProductCard from './ProductCard';\r\n\r\nconst Catalog = ({ handleAddCart, handleRemoveCart }) => {\r\n  const { products } = useSelector((state) => state.products, shallowEqual);\r\n\r\n  return (\r\n    <>\r\n      <div className='catalog'>\r\n        <header>\r\n          <h2>Product Catalog</h2>\r\n        </header>\r\n        <section className='product-list row'>\r\n          {products.map((product) => (\r\n            <ProductCard\r\n              key={product.id}\r\n              product={product}\r\n              handleRemoveCart={handleRemoveCart}\r\n              handleAddCart={handleAddCart}\r\n            />\r\n          ))}\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Catalog;\r\n","import React from 'react';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\nimport { useParams, Redirect } from 'react-router';\r\nimport CustomButton from './CustomButton';\r\nimport './Product.css';\r\n\r\nconst Product = ({ cantFind, handleRemoveCart, handleAddCart }) => {\r\n  const { id } = useParams();\r\n  const { products } = useSelector((state) => state.products, shallowEqual);\r\n  let productItem = products.find((p) => p.id === id);\r\n  if (!productItem) return <Redirect to={cantFind} />;\r\n\r\n  return (\r\n    <div className='product '>\r\n      <div className='product-header'>\r\n        <header>\r\n          <h2>{productItem.name}</h2>\r\n        </header>\r\n        <img\r\n          src={productItem.image_url}\r\n          alt={`${productItem.name}`}\r\n          className='product-image'\r\n        />\r\n      </div>\r\n      <div className='product-info'>\r\n        <p>Price: {productItem.price}</p>\r\n        <p>Description: {productItem.description}</p>\r\n      </div>\r\n      <div className='product-btns'>\r\n        <CustomButton\r\n          onClickAction={() =>\r\n            handleAddCart({\r\n              ...productItem,\r\n            })\r\n          }\r\n          color='primary'\r\n          btnName='ðŸ›’ Add'\r\n        />\r\n\r\n        <CustomButton\r\n          onClickAction={() => handleRemoveCart({ ...productItem })}\r\n          color='danger'\r\n          btnName='Remove ðŸ›’'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { add_to_cart, remove_from_cart } from './actions';\r\nimport Cart from './Cart';\r\nimport Catalog from './Catalog';\r\nimport Product from './Product';\r\n\r\nconst Routes = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAddCart = (product) => {\r\n    dispatch(add_to_cart(product));\r\n  };\r\n\r\n  const handleRemoveCart = (product) => {\r\n    dispatch(remove_from_cart(product));\r\n  };\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/'>\r\n        <Catalog\r\n          handleAddCart={handleAddCart}\r\n          handleRemoveCart={handleRemoveCart}\r\n        />\r\n      </Route>\r\n      <Route exact path='/products/:id'>\r\n        <Product\r\n          cantFind='/'\r\n          handleRemoveCart={handleRemoveCart}\r\n          handleAddCart={handleAddCart}\r\n        />\r\n      </Route>\r\n      <Route exact path='/cart'>\r\n        <Cart\r\n          handleRemoveCart={handleRemoveCart}\r\n          handleAddCart={handleAddCart}\r\n        />\r\n      </Route>\r\n      <Redirect to='/' />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import { ADD_TO_CART, REMOVE_FROM_CART } from './actionTypes';\r\n\r\nconst add_to_cart = (product) => ({ type: ADD_TO_CART, product });\r\n\r\nconst remove_from_cart = (product) => ({ type: REMOVE_FROM_CART, product });\r\n\r\nexport { add_to_cart, remove_from_cart };\r\n","const ADD_TO_CART = 'ADD_TO_CART';\r\nconst REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n\r\nexport { ADD_TO_CART, REMOVE_FROM_CART };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\n\r\nconst CartIcon = () => {\r\n  const { cart } = useSelector((state) => state.cart, shallowEqual);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/cart'>\r\n        <span>\r\n          (${cart.total_amount.toFixed(2)}) {cart.num_items} ðŸ›’\r\n        </span>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\nexport default CartIcon;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavBar.css';\r\nimport CartIcon from './CartIcon';\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <nav className='product-nav'>\r\n        <NavLink exact to='/'>\r\n          <h4>Shoply</h4>\r\n        </NavLink>\r\n        <div className='cart-nav'>\r\n          <CartIcon />\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport Routes from './Routes';\nimport NavBar from './NavBar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <NavBar />\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_TO_CART, REMOVE_FROM_CART } from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {\r\n  cart: { items: [], total_amount: 0, num_items: 0 },\r\n};\r\n\r\nconst rootReducer = (state = INITIAL_STATE, action) => {\r\n  const { product } = action;\r\n  const { cart } = state;\r\n  const cartItemIdx = cart.items.findIndex(\r\n    (cartItem) => cartItem.id === product.id\r\n  );\r\n\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      cart.total_amount += product.price;\r\n      cart.num_items++;\r\n      if (cartItemIdx !== -1) {\r\n        const cartItem = cart.items[cartItemIdx];\r\n        return {\r\n          cart: {\r\n            ...cart,\r\n            items: [\r\n              ...cart.items.slice(0, cartItemIdx),\r\n              { ...cartItem, quantity: cartItem.quantity + 1 || 1 },\r\n              ...cart.items.slice(cartItemIdx + 1),\r\n            ],\r\n          },\r\n        };\r\n      } else {\r\n        return {\r\n          cart: {\r\n            ...cart,\r\n            items: [...cart.items, { ...product, quantity: 1 }],\r\n          },\r\n        };\r\n      }\r\n\r\n    case REMOVE_FROM_CART:\r\n      const cartItem = cart.items[cartItemIdx];\r\n      if (!cartItem) return state;\r\n\r\n      cart.total_amount -= cartItem.price;\r\n      cart.num_items--;\r\n      if (cartItem && cartItem.quantity > 1) {\r\n        return {\r\n          cart: {\r\n            ...cart,\r\n            items: [\r\n              ...cart.items.slice(0, cartItemIdx),\r\n              { ...cartItem, quantity: cartItem.quantity - 1 },\r\n              ...cart.items.slice(cartItemIdx + 1),\r\n            ],\r\n          },\r\n        };\r\n      }\r\n      return {\r\n        cart: {\r\n          ...state.cart,\r\n          items: state.cart.items.filter(\r\n            (cartItem) => cartItem.id !== product.id\r\n          ),\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import { products } from '../data.json';\r\nimport {} from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {\r\n  products: [...Object.values(products)].map((product, i) => ({\r\n    id: Object.keys(products)[i],\r\n    ...product,\r\n  })),\r\n};\r\n\r\nconst productsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default productsReducer;\r\n","import { combineReducers } from 'redux';\r\nimport cartReducer from './cartReducer';\r\nimport productsReducer from './productsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  cart: cartReducer,\r\n  products: productsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}